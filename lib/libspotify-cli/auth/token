#!/bin/bash
# vim: ft=bash ts=2 sw=2 et ff=unix fenc=utf-8

set -eu

# Part of Spotify-cli
# Authorization Code Flow with Proof Key for Code Exchange (PKCE)
# Exchange authorization code to access token.

##### Load libraries
_CURDIR="$(cd $(dirname $0) ; pwd)"
LIBSPDIR=${LIBSPDIR:="${_CURDIR}/.."}     # (Caution) varies according to _CURDIR
CONFDIR=${CONFIDR:="${LIBSPDIR}/config"}
source ${CONFDIR}/basic_settings

##### API
#URLBASE="http://localhost:8080"   # for debug with netcat
URLBASE="https://accounts.spotify.com"
API="api/token"

##### Processing body
GRANT_TYPE="authorization_code"
CODE="$(<${CONFDIR}/authorization_code)"
CODE_VERIFIER="$(<${CONFDIR}/code_verifier)"

# curl ${1:-} --silent --insecure --write-out '\n\n%{http_code}\n' \
#   --header "${HEADER_ALWAYS}" \
#   --data-urlencode "client_id=${CLIENT_ID}" \
#   --data-urlencode "grant_type=${GRANT_TYPE}" \
#   --data-urlencode "code=${CODE}" \
#   --data-urlencode "redirect_uri=${REDIRECT_URI}" \
#   --data-urlencode "code_verifier=${CODE_VERIFIER}" \
#   "${URLBASE}/${API}"
#
# exit 16

RESPONSE=$(curl ${1:-} --silent --insecure --write-out '\n\n%{http_code}\n' \
  --header "${HEADER_ALWAYS}" \
  --data-urlencode "client_id=${CLIENT_ID}" \
  --data-urlencode "grant_type=${GRANT_TYPE}" \
  --data-urlencode "code=${CODE}" \
  --data-urlencode "redirect_uri=${REDIRECT_URI}" \
  --data-urlencode "code_verifier=${CODE_VERIFIER}" \
  "${URLBASE}/${API}"
)

HTTP_CODE=$(tail -n1 <<< "${RESPONSE}")
RES_BODY=$(head -n-1 <<< "${RESPONSE}")

# Stop server for callback
until [ -z ${SERVER_PID:=$(lsof -t -i:${REDIRECT_PORT} || true)} ]
do
   kill ${SERVER_PID}
   sleep 1
   SERVER_PID=$(lsof -t -i:${REDIRECT_PORT} || true)
done

# HTTP Error check
if [ "${HTTP_CODE}" -ne "${HTTP_OK}" ]; then
  #echo "Something wrong!(HTTP Status Code: ${HTTP_CODE})"
  echo "${R_PREFIX}:${R_FAIL}:${HTTP_CODE}"
  exit ${HTTP_CODE}
fi 1>&2

# Output
ACCESS_TOKEN=$(echo ${RES_BODY} | jq -r '.access_token')
REFRESH_TOKEN=$(echo ${RES_BODY} | jq -r '.refresh_token')

# JSON error check
if [ -z "${ACCESS_TOKEN}" -o -z "${REFRESH_TOKEN}" ]; then
  echo "${R_PREFIX}:${R_JSON}:${HTTP_UNAUTHORIZED}"
  exit ${HTTP_UNAUTHORIZED}
fi 1>&2

# Success
echo $(get_epoch) > ${CONFDIR}/token_epoch
echo -n "${ACCESS_TOKEN}"  > ${CONFDIR}/access_token
echo -n "${REFRESH_TOKEN}" > ${CONFDIR}/refresh_token

echo "${R_PREFIX}:${R_SUCCESS}:${HTTP_CODE}" 1>&2
exit 0
